// <auto-generated />
using System;
using Healthy.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Healthy.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Healthy.Domain.Entities.BodyRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("BodyFatPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Weight")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("RecordDate");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "RecordDate");

                    b.ToTable("BodyRecords", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-bbbb-bbbb-bbbb-111111111111"),
                            BodyFatPercentage = 18.5m,
                            CreatedAt = new DateTime(2024, 7, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            IsDeleted = false,
                            Notes = "健康診断後の記録",
                            RecordDate = new DateTime(2024, 7, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Weight = 65.5m
                        },
                        new
                        {
                            Id = new Guid("22222222-bbbb-bbbb-bbbb-222222222222"),
                            BodyFatPercentage = 18.2m,
                            CreatedAt = new DateTime(2024, 7, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            IsDeleted = false,
                            Notes = "ダイエット開始",
                            RecordDate = new DateTime(2024, 7, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Weight = 65.2m
                        },
                        new
                        {
                            Id = new Guid("33333333-bbbb-bbbb-bbbb-333333333333"),
                            BodyFatPercentage = 17.9m,
                            CreatedAt = new DateTime(2024, 7, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            IsDeleted = false,
                            Notes = "順調に減量中",
                            RecordDate = new DateTime(2024, 7, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Weight = 64.8m
                        },
                        new
                        {
                            Id = new Guid("44444444-bbbb-bbbb-bbbb-444444444444"),
                            BodyFatPercentage = 17.6m,
                            CreatedAt = new DateTime(2024, 7, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            IsDeleted = false,
                            Notes = "運動効果が見えてきた",
                            RecordDate = new DateTime(2024, 7, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Weight = 64.5m
                        },
                        new
                        {
                            Id = new Guid("55555555-bbbb-bbbb-bbbb-555555555555"),
                            BodyFatPercentage = 17.3m,
                            CreatedAt = new DateTime(2024, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            IsDeleted = false,
                            Notes = "目標体重に近づいている",
                            RecordDate = new DateTime(2024, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Weight = 64.2m
                        },
                        new
                        {
                            Id = new Guid("66666666-bbbb-bbbb-bbbb-666666666666"),
                            BodyFatPercentage = 17.0m,
                            CreatedAt = new DateTime(2024, 7, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            IsDeleted = false,
                            Notes = "理想的な体重に到達",
                            RecordDate = new DateTime(2024, 7, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Weight = 64.0m
                        },
                        new
                        {
                            Id = new Guid("77777777-bbbb-bbbb-bbbb-777777777777"),
                            BodyFatPercentage = 16.8m,
                            CreatedAt = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            IsDeleted = false,
                            Notes = "維持していきたい",
                            RecordDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Weight = 63.8m
                        });
                });

            modelBuilder.Entity("Healthy.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryType")
                        .HasDatabaseName("IX_Categories_CategoryType");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Categories_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Categories_IsActive");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Categories_IsDeleted");

                    b.HasIndex("PublishedAt")
                        .HasDatabaseName("IX_Categories_PublishedAt");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("111111aa-ccaa-ccaa-ccaa-111111111111"),
                            CategoryType = "diet",
                            CreatedAt = new DateTime(2024, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "健康的な食事とダイエットに関する情報とヒント",
                            ImageUrl = "/images/categories/diet-category.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            PublishedAt = new DateTime(2024, 6, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Tags = "#食事,#ダイエット,#栄養"
                        },
                        new
                        {
                            Id = new Guid("222222aa-ccaa-ccaa-ccaa-222222222222"),
                            CategoryType = "exercise",
                            CreatedAt = new DateTime(2024, 6, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "効果的な運動方法とフィットネスガイド",
                            ImageUrl = "/images/categories/exercise-category.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            PublishedAt = new DateTime(2024, 6, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            Tags = "#運動,#フィットネス,#トレーニング"
                        },
                        new
                        {
                            Id = new Guid("333333aa-ccaa-ccaa-ccaa-333333333333"),
                            CategoryType = "beauty",
                            CreatedAt = new DateTime(2024, 6, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "美容とスキンケアに関する専門的なアドバイス",
                            ImageUrl = "/images/categories/beauty-category.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            PublishedAt = new DateTime(2024, 6, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Tags = "#美容,#スキンケア,#アンチエイジング"
                        },
                        new
                        {
                            Id = new Guid("444444aa-ccaa-ccaa-ccaa-444444444444"),
                            CategoryType = "wellness",
                            CreatedAt = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "心と体の健康を保つためのウェルネス情報",
                            ImageUrl = "/images/categories/wellness-category.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            PublishedAt = new DateTime(2024, 6, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Tags = "#ウェルネス,#健康,#心理"
                        },
                        new
                        {
                            Id = new Guid("555555aa-ccaa-ccaa-ccaa-555555555555"),
                            CategoryType = "recommended",
                            CreatedAt = new DateTime(2024, 6, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "専門家が推奨する健康に関する総合的な情報",
                            ImageUrl = "/images/categories/recommended-category.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            PublishedAt = new DateTime(2024, 6, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            Tags = "#推奨,#専門家,#総合"
                        },
                        new
                        {
                            Id = new Guid("666666aa-ccaa-ccaa-ccaa-666666666666"),
                            CategoryType = "lifestyle",
                            CreatedAt = new DateTime(2024, 6, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "健康的なライフスタイルを送るためのヒント",
                            ImageUrl = "/images/categories/lifestyle-category.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            PublishedAt = new DateTime(2024, 6, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            Tags = "#ライフスタイル,#習慣,#日常"
                        },
                        new
                        {
                            Id = new Guid("777777aa-ccaa-ccaa-ccaa-777777777777"),
                            CategoryType = "recipe",
                            CreatedAt = new DateTime(2024, 7, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "健康的で美味しいレシピとクッキングガイド",
                            ImageUrl = "/images/categories/recipe-category.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            PublishedAt = new DateTime(2024, 7, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Tags = "#レシピ,#料理,#ヘルシー"
                        },
                        new
                        {
                            Id = new Guid("888888aa-ccaa-ccaa-ccaa-888888888888"),
                            CategoryType = "supplement",
                            CreatedAt = new DateTime(2024, 7, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "栄養補助食品とサプリメントに関する情報",
                            ImageUrl = "/images/categories/supplement-category.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            PublishedAt = new DateTime(2024, 7, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            Tags = "#サプリメント,#栄養補助,#健康食品"
                        });
                });

            modelBuilder.Entity("Healthy.Domain.Entities.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsPublished");

                    b.ToTable("Columns", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-cccc-cccc-cccc-cccccccccccc"),
                            Category = "diet",
                            Content = "魚を食べて頭もカラダも元気に！知っておきたい魚を食べるメリット",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            ImageUrl = "/images/column-01.jpg",
                            IsDeleted = false,
                            IsPublished = true,
                            Tags = "#魚料理,#和食,#DHA",
                            Title = "魚を食べて頭もカラダも元気に！"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-cccc-cccc-cccc-cccccccccccc"),
                            Category = "recommended",
                            Content = "簡単！美味しくヘルシーに！オススメのダイエットレシピを紹介します。",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            ImageUrl = "/images/column-02.jpg",
                            IsDeleted = false,
                            IsPublished = true,
                            Tags = "#ダイエット,#ヘルシー,#レシピ",
                            Title = "ダイエットレシピ特集"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Category = "beauty",
                            Content = "美肌効果抜群！アンチエイジングに効果的な食材とスキンケア方法",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            ImageUrl = "/images/column-03.jpg",
                            IsDeleted = false,
                            IsPublished = true,
                            Tags = "#美容,#アンチエイジング,#スキンケア",
                            Title = "美肌効果抜群！アンチエイジング"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-cccc-cccc-cccc-cccccccccccc"),
                            Category = "recommended",
                            Content = "運動習慣を身につけて健康的な体づくりを始めよう！初心者向けガイド",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            ImageUrl = "/images/column-04.jpg",
                            IsDeleted = false,
                            IsPublished = true,
                            Tags = "#運動,#健康,#初心者",
                            Title = "運動習慣を身につけよう"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-cccc-cccc-cccc-cccccccccccc"),
                            Category = "diet",
                            Content = "バランスの良い食事で免疫力アップ！栄養士おすすめの食材と調理法",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            ImageUrl = "/images/column-05.jpg",
                            IsDeleted = false,
                            IsPublished = true,
                            Tags = "#栄養,#免疫力,#バランス",
                            Title = "バランスの良い食事で免疫力アップ"
                        });
                });

            modelBuilder.Entity("Healthy.Domain.Entities.Diary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DiaryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Mood")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiaryDate");

                    b.HasIndex("IsPrivate");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "DiaryDate");

                    b.ToTable("Diaries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-dddd-dddd-dddd-111111111111"),
                            Content = "今日からダイエットを始めることにしました。健康的な食事と運動を心がけて、3ヶ月で5kg減量することが目標です。",
                            CreatedAt = new DateTime(2024, 7, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            DiaryDate = new DateTime(2024, 7, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            IsPrivate = false,
                            Mood = "やる気満々",
                            Tags = "#ダイエット,#決意,#目標設定",
                            Title = "ダイエット開始の決意",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("22222222-dddd-dddd-dddd-222222222222"),
                            Content = "初めて本格的にランニングをしました。思っていたより辛かったですが、最後まで走り切れて達成感がありました。",
                            CreatedAt = new DateTime(2024, 7, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            DiaryDate = new DateTime(2024, 7, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            IsPrivate = false,
                            Mood = "充実感",
                            Tags = "#ランニング,#運動,#達成感",
                            Title = "初回ランニング体験",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("33333333-dddd-dddd-dddd-333333333333"),
                            Content = "カロリー計算アプリを使って食事管理を始めました。野菜を多めに取り入れて、満足感のある食事を心がけています。",
                            CreatedAt = new DateTime(2024, 7, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            DiaryDate = new DateTime(2024, 7, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            IsPrivate = true,
                            Mood = "前向き",
                            Tags = "#食事管理,#カロリー,#野菜",
                            Title = "食事制限の工夫",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("44444444-dddd-dddd-dddd-444444444444"),
                            Content = "ジムに入会して筋力トレーニングを始めました。トレーナーさんに正しいフォームを教えてもらい、効果的な運動ができそうです。",
                            CreatedAt = new DateTime(2024, 7, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            DiaryDate = new DateTime(2024, 7, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            IsPrivate = false,
                            Mood = "ワクワク",
                            Tags = "#筋トレ,#ジム,#トレーナー",
                            Title = "筋トレデビュー",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("55555555-dddd-dddd-dddd-555555555555"),
                            Content = "ダイエットを始めて2週間が経ち、体重が2kg減りました。体も少し軽くなった気がして、モチベーションが上がっています。",
                            CreatedAt = new DateTime(2024, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            DiaryDate = new DateTime(2024, 7, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            IsPrivate = false,
                            Mood = "嬉しい",
                            Tags = "#体重減少,#モチベーション,#成果",
                            Title = "体重減少の実感",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("66666666-dddd-dddd-dddd-666666666666"),
                            Content = "今日はヨガクラスに参加しました。普段使わない筋肉を使って、体の柔軟性も向上しそうです。心もリラックスできました。",
                            CreatedAt = new DateTime(2024, 7, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            DiaryDate = new DateTime(2024, 7, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            IsPrivate = true,
                            Mood = "穏やか",
                            Tags = "#ヨガ,#柔軟性,#リラックス",
                            Title = "新しい運動に挑戦",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("77777777-dddd-dddd-dddd-777777777777"),
                            Content = "同じくダイエット中の友人と一緒に運動しました。お互いに励まし合えて、一人では続けられないことも楽しく続けられそうです。",
                            CreatedAt = new DateTime(2024, 7, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            DiaryDate = new DateTime(2024, 7, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            IsPrivate = false,
                            Mood = "楽しい",
                            Tags = "#友人,#励まし,#チームワーク",
                            Title = "友人との励まし合い",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("88888888-dddd-dddd-dddd-888888888888"),
                            Content = "ダイエット開始から1ヶ月が経ちました。体重は順調に減っていて、目標まであと2kgです。継続することの大切さを実感しています。",
                            CreatedAt = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            DiaryDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            IsPrivate = false,
                            Mood = "満足",
                            Tags = "#継続,#目標,#成長",
                            Title = "目標達成への道のり",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        });
                });

            modelBuilder.Entity("Healthy.Domain.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CaloriesBurned")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExerciseDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("ExerciseDate");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "ExerciseDate");

                    b.ToTable("Exercises", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-eeee-eeee-eeee-111111111111"),
                            CaloriesBurned = 250,
                            Category = "有酸素運動",
                            CreatedAt = new DateTime(2024, 7, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Description = "公園で30分のジョギング",
                            DurationMinutes = 30,
                            ExerciseDate = new DateTime(2024, 7, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "天気が良くて気持ちよかった",
                            Title = "朝のランニング",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("22222222-eeee-eeee-eeee-222222222222"),
                            CaloriesBurned = 300,
                            Category = "筋力トレーニング",
                            CreatedAt = new DateTime(2024, 7, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Description = "ジムでの筋トレセッション",
                            DurationMinutes = 45,
                            ExerciseDate = new DateTime(2024, 7, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "腕と胸を重点的に",
                            Title = "筋力トレーニング",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("33333333-eeee-eeee-eeee-333333333333"),
                            CaloriesBurned = 180,
                            Category = "ヨガ",
                            CreatedAt = new DateTime(2024, 7, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Description = "ハタヨガ60分クラス",
                            DurationMinutes = 60,
                            ExerciseDate = new DateTime(2024, 7, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "リラックスできた",
                            Title = "ヨガクラス",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("44444444-eeee-eeee-eeee-444444444444"),
                            CaloriesBurned = 320,
                            Category = "水泳",
                            CreatedAt = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Description = "プールで自由形25m×20本",
                            DurationMinutes = 40,
                            ExerciseDate = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "久しぶりの水泳で疲れた",
                            Title = "水泳",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("55555555-eeee-eeee-eeee-555555555555"),
                            CaloriesBurned = 400,
                            Category = "有酸素運動",
                            CreatedAt = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Description = "川沿いを1時間サイクリング",
                            DurationMinutes = 60,
                            ExerciseDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "景色を楽しみながら",
                            Title = "サイクリング",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("66666666-eeee-eeee-eeee-666666666666"),
                            CaloriesBurned = 350,
                            Category = "ダンス",
                            CreatedAt = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Description = "ズンバクラス",
                            DurationMinutes = 50,
                            ExerciseDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "楽しく汗をかけた",
                            Title = "ダンスレッスン",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("77777777-eeee-eeee-eeee-777777777777"),
                            CaloriesBurned = 120,
                            Category = "有酸素運動",
                            CreatedAt = new DateTime(2024, 8, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Description = "近所を軽く散歩",
                            DurationMinutes = 25,
                            ExerciseDate = new DateTime(2024, 8, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Notes = "リフレッシュできた",
                            Title = "散歩",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        });
                });

            modelBuilder.Entity("Healthy.Domain.Entities.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Meals_UserId");

                    b.HasIndex("UserId", "Date")
                        .HasDatabaseName("IX_Meals_UserId_Date");

                    b.HasIndex("UserId", "Type")
                        .HasDatabaseName("IX_Meals_UserId_Type");

                    b.ToTable("Meals", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-bbbb-bbbb-aaaa-111111111111"),
                            CreatedAt = new DateTime(2024, 7, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Date = new DateTime(2024, 7, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrl = "/images/meals/breakfast-01.jpg",
                            IsDeleted = false,
                            Type = "Morning",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("22222222-bbbb-bbbb-aaaa-222222222222"),
                            CreatedAt = new DateTime(2024, 7, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Date = new DateTime(2024, 7, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrl = "/images/meals/lunch-01.jpg",
                            IsDeleted = false,
                            Type = "Lunch",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("33333333-bbbb-bbbb-aaaa-333333333333"),
                            CreatedAt = new DateTime(2024, 7, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Date = new DateTime(2024, 7, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrl = "/images/meals/dinner-01.jpg",
                            IsDeleted = false,
                            Type = "Dinner",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("44444444-bbbb-bbbb-aaaa-444444444444"),
                            CreatedAt = new DateTime(2024, 7, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Date = new DateTime(2024, 7, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrl = "/images/meals/breakfast-02.jpg",
                            IsDeleted = false,
                            Type = "Morning",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("55555555-bbbb-bbbb-aaaa-555555555555"),
                            CreatedAt = new DateTime(2024, 7, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Date = new DateTime(2024, 7, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrl = "/images/meals/lunch-02.jpg",
                            IsDeleted = false,
                            Type = "Lunch",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("66666666-bbbb-bbbb-aaaa-666666666666"),
                            CreatedAt = new DateTime(2024, 7, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Date = new DateTime(2024, 7, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrl = "/images/meals/snack-01.jpg",
                            IsDeleted = false,
                            Type = "Snack",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("77777777-bbbb-bbbb-aaaa-777777777777"),
                            CreatedAt = new DateTime(2024, 7, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Date = new DateTime(2024, 7, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrl = "/images/meals/dinner-02.jpg",
                            IsDeleted = false,
                            Type = "Dinner",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("88888888-bbbb-bbbb-aaaa-888888888888"),
                            CreatedAt = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Date = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrl = "/images/meals/breakfast-03.jpg",
                            IsDeleted = false,
                            Type = "Morning",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("99999999-bbbb-bbbb-aaaa-999999999999"),
                            CreatedAt = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                            Date = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrl = "/images/meals/lunch-03.jpg",
                            IsDeleted = false,
                            Type = "Lunch",
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        });
                });

            modelBuilder.Entity("Healthy.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Description = "System Administrator with full access",
                            IsActive = true,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Description = "Regular user with basic access",
                            IsActive = true,
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Description = "Moderator with limited admin access",
                            IsActive = true,
                            Name = "Moderator"
                        });
                });

            modelBuilder.Entity("Healthy.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Users_CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Users_IsDeleted");

                    b.HasIndex("PhoneNumber")
                        .HasDatabaseName("IX_Users_PhoneNumber");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Email = "admin@healthysystem.com",
                            FirstName = "System",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Administrator",
                            PasswordHash = "$2a$11$3tEK5ZODo.jJF5nJv.wgbeOaE4j3RgD8xTg2Pl3.wIzBzJo7MKf6W"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Email = "user@healthysystem.com",
                            FirstName = "Test",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            PasswordHash = "$2a$11$3tEK5ZODo.jJF5nJv.wgbeOaE4j3RgD8xTg2Pl3.wIzBzJo7MKf6W"
                        });
                });

            modelBuilder.Entity("Healthy.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-aaaa-aaaa-aaaa-111111111111"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111"),
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("22222222-bbbb-bbbb-bbbb-222222222222"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222"),
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        });
                });

            modelBuilder.Entity("Healthy.Domain.Entities.BodyRecord", b =>
                {
                    b.HasOne("Healthy.Domain.Entities.User", "User")
                        .WithMany("BodyRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Healthy.Domain.Entities.Diary", b =>
                {
                    b.HasOne("Healthy.Domain.Entities.User", "User")
                        .WithMany("Diaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Healthy.Domain.Entities.Exercise", b =>
                {
                    b.HasOne("Healthy.Domain.Entities.User", "User")
                        .WithMany("Exercises")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Healthy.Domain.Entities.Meal", b =>
                {
                    b.HasOne("Healthy.Domain.Entities.User", "User")
                        .WithMany("Meals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Healthy.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Healthy.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Healthy.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Healthy.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Healthy.Domain.Entities.User", b =>
                {
                    b.Navigation("BodyRecords");

                    b.Navigation("Diaries");

                    b.Navigation("Exercises");

                    b.Navigation("Meals");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
