name: 🔍 Pull Request Validation

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: './Healthy/Healthy.sln'
  API_PROJECT_PATH: './Healthy/Healthy.Api/Healthy.Api.csproj'
  TEST_PROJECT_PATH: './Healthy/Healthy.Tests.Unit/Healthy.Tests.Unit.csproj'
  INFRASTRUCTURE_PROJECT_PATH: './Healthy/Healthy.Infrastructure/Healthy.Infrastructure.csproj'

jobs:
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.changes.outputs.api }}
      tests: ${{ steps.changes.outputs.tests }}
      docker: ${{ steps.changes.outputs.docker }}
      docs: ${{ steps.changes.outputs.docs }}
      migrations: ${{ steps.changes.outputs.migrations }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            api:
              - 'Healthy/**/*.cs'
              - 'Healthy/**/*.csproj'
              - 'Healthy/**/appsettings*.json'
            tests:
              - 'Healthy/Healthy.Tests.Unit/**'
            docker:
              - 'Healthy/Healthy.Api/Dockerfile'
              - 'docker-compose*.yml'
            docs:
              - '**.md'
              - 'docs/**'
            migrations:
              - 'Healthy/Healthy.Infrastructure/Migrations/**'

  code-quality:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.api == 'true'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/Healthy/**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: 🔄 Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: 🏗️ Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Debug

    - name: 🧹 Run code formatting check
      run: |
        echo "🧹 Checking code formatting..."
        dotnet format ${{ env.SOLUTION_PATH }} --verify-no-changes --verbosity diagnostic

    - name: 🔍 Run static analysis
      run: |
        echo "🔍 Running static code analysis..."
        # Run built-in analyzers
        dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Debug --verbosity normal

  test-validation:
    name: 🧪 Test Validation
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.api == 'true' || needs.changes.outputs.tests == 'true'

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: 'Test@Passw0rd123!'
          ACCEPT_EULA: 'Y'
          MSSQL_PID: 'Express'
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P Test@Passw0rd123! -C -Q 'SELECT 1'"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=10

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/Healthy/**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: 🔄 Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: 🏗️ Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release

    - name: 🧪 Run unit tests with coverage
      run: |
        dotnet test ${{ env.TEST_PROJECT_PATH }} \
          --no-build \
          --configuration Release \
          --logger trx \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

    - name: 📊 Generate coverage report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: TestResults/**/coverage.opencover.xml
        badge: true
        fail_below_min: false
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'

    - name: 💬 Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md

  migration-validation:
    name: 🗄️ Migration Validation
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.migrations == 'true' || needs.changes.outputs.api == 'true'

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: 'Test@Passw0rd123!'
          ACCEPT_EULA: 'Y'
          MSSQL_PID: 'Express'
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P Test@Passw0rd123! -C -Q 'SELECT 1'"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=10

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🔄 Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: 🗄️ Validate migrations
      env:
        ConnectionStrings__DefaultConnection: 'Server=localhost,1433;Database=HealthyDB_PR_${{ github.event.number }};User Id=sa;Password=Test@Passw0rd123!;TrustServerCertificate=true;Encrypt=false'
      run: |
        echo "🗄️ Validating database migrations..."
        sleep 30  # Wait for SQL Server to be ready
        
        # Check if migrations can be applied
        dotnet ef database update --project ${{ env.INFRASTRUCTURE_PROJECT_PATH }} --startup-project ${{ env.API_PROJECT_PATH }} --connection "$ConnectionStrings__DefaultConnection"
        
        # List applied migrations
        echo "📋 Applied migrations:"
        dotnet ef migrations list --project ${{ env.INFRASTRUCTURE_PROJECT_PATH }} --startup-project ${{ env.API_PROJECT_PATH }} --connection "$ConnectionStrings__DefaultConnection"

  docker-validation:
    name: 🐳 Docker Validation
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docker == 'true' || needs.changes.outputs.api == 'true'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🐳 Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Healthy
        file: ./Healthy/Healthy.Api/Dockerfile
        push: false
        tags: healthy-api:pr-${{ github.event.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🛡️ Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'healthy-api:pr-${{ github.event.number }}'
        format: 'table'
        exit-code: '0'  # Don't fail on vulnerabilities in PR validation

  security-check:
    name: 🛡️ Security Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.api == 'true'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🔍 Run security audit
      run: |
        echo "🔍 Running .NET security audit..."
        dotnet list ${{ env.SOLUTION_PATH }} package --vulnerable --include-transitive

  pr-summary:
    name: 📋 PR Summary
    runs-on: ubuntu-latest
    needs: [changes, code-quality, test-validation, migration-validation, docker-validation, security-check]
    if: always()

    steps:
    - name: 📋 Create PR Summary
      run: |
        echo "## 🔍 Pull Request Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📊 Changes Detected:" >> $GITHUB_STEP_SUMMARY
        echo "- 🔧 API Code: ${{ needs.changes.outputs.api == 'true' && '✅ Yes' || '❌ No' }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🧪 Tests: ${{ needs.changes.outputs.tests == 'true' && '✅ Yes' || '❌ No' }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🐳 Docker: ${{ needs.changes.outputs.docker == 'true' && '✅ Yes' || '❌ No' }}" >> $GITHUB_STEP_SUMMARY
        echo "- 📚 Documentation: ${{ needs.changes.outputs.docs == 'true' && '✅ Yes' || '❌ No' }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🗄️ Migrations: ${{ needs.changes.outputs.migrations == 'true' && '✅ Yes' || '❌ No' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### ✅ Validation Results:" >> $GITHUB_STEP_SUMMARY
        echo "- 🧹 Code Quality: ${{ needs.code-quality.result == 'success' && '✅ Passed' || needs.code-quality.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🧪 Tests: ${{ needs.test-validation.result == 'success' && '✅ Passed' || needs.test-validation.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🗄️ Migrations: ${{ needs.migration-validation.result == 'success' && '✅ Passed' || needs.migration-validation.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🐳 Docker: ${{ needs.docker-validation.result == 'success' && '✅ Passed' || needs.docker-validation.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🛡️ Security: ${{ needs.security-check.result == 'success' && '✅ Passed' || needs.security-check.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.code-quality.result }}" == "success" && "${{ needs.test-validation.result }}" == "success" ]]; then
          echo "### 🎉 All validations passed! This PR is ready for review." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ⚠️ Some validations failed. Please review the errors above." >> $GITHUB_STEP_SUMMARY
        fi
