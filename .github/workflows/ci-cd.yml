name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  DOCKER_IMAGE_NAME: healthy-api
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore Healthy/Healthy.sln

    - name: Build
      run: dotnet build Healthy/Healthy.sln --no-restore --configuration Release

    - name: Test
      run: dotnet test Healthy/Healthy.sln --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage/

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Run security scan
      uses: snyk/actions/dotnet@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Docker Build and Push Job
  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Healthy/Healthy.Api
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Scan Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Development Environment
  deploy-dev:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to development environment
      run: |
        echo "Deploying to development environment..."
        # Add your deployment commands here
        # Example: docker-compose -f docker-compose.dev.yml up -d

    - name: Health check
      run: |
        echo "Performing health check..."
        # Add health check commands here
        # Example: curl -f http://dev-api.example.com/health || exit 1

  # Deploy to Production Environment
  deploy-prod:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: docker-compose -f docker-compose.prod.yml up -d

    - name: Health check
      run: |
        echo "Performing health check..."
        # Add health check commands here
        # Example: curl -f https://api.example.com/health || exit 1

    - name: Notify deployment
      if: success()
      run: |
        echo "Production deployment completed successfully!"
        # Add notification logic here (Slack, Teams, etc.)

  # Security and Compliance Checks
  security-checks:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run OWASP ZAP scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'http://localhost:5000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Run dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Healthy System'
        path: '.'
        format: 'HTML'
        out: 'reports'

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: reports/

  # Performance Testing
  performance-test:
    needs: deploy-dev
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Artillery
      run: npm install -g artillery

    - name: Run performance tests
      run: |
        artillery run tests/performance/load-test.yml
        # Create this file with your performance test scenarios

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: reports/ 