name: Security Scan

on:
  schedule:
    # Run security scans weekly
    - cron: '0 2 * * 1'
  workflow_dispatch:
  push:
    branches: [ main, develop ]

jobs:
  # SAST (Static Application Security Testing)
  sast:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        queries: security-extended,security-and-quality

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Build for CodeQL
      run: |
        dotnet restore Healthy/Healthy.sln
        dotnet build Healthy/Healthy.sln --configuration Release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Dependency vulnerability scan
  dependency-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Run Snyk security scan
      uses: snyk/actions/dotnet@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json-file-output=snyk-report.json

    - name: Upload Snyk results
      uses: actions/upload-artifact@v4
      with:
        name: snyk-results
        path: snyk-report.json

    - name: Comment PR with Snyk results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const snykReport = JSON.parse(fs.readFileSync('snyk-report.json', 'utf8'));
          
          let comment = '## üîí Security Scan Results\n\n';
          
          if (snykReport.vulnerabilities && snykReport.vulnerabilities.length > 0) {
            comment += '### ‚ö†Ô∏è Vulnerabilities Found\n\n';
            snykReport.vulnerabilities.forEach(vuln => {
              comment += `- **${vuln.title}** (${vuln.severity})\n`;
              comment += `  - Package: ${vuln.packageName}\n`;
              comment += `  - CVE: ${vuln.identifiers?.CVE?.join(', ') || 'N/A'}\n\n`;
            });
          } else {
            comment += '‚úÖ No vulnerabilities found!\n\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Container image security scan
  container-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t healthy-api:test -f ./Healthy/Healthy.Api/Dockerfile ./Healthy

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'healthy-api:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Secrets scanning
  secrets-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        args: --only-verified --format sarif --output trufflehog-results.sarif

    - name: Upload TruffleHog results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trufflehog-results.sarif'

  # License compliance check
  license-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Generate license report
      run: |
        dotnet list package --format json > packages.json
        dotnet list package --include-transitive --format json > packages-transitive.json

    - name: Upload package lists
      uses: actions/upload-artifact@v4
      with:
        name: package-lists
        path: |
          packages.json
          packages-transitive.json

  # Security policy compliance
  security-policy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for security policy
      run: |
        if [ ! -f "SECURITY.md" ]; then
          echo "‚ö†Ô∏è SECURITY.md file not found"
          exit 1
        fi
        echo "‚úÖ Security policy found"

    - name: Check for dependency files
      run: |
        if [ ! -f "Healthy/Healthy.Api/Healthy.Api.csproj" ]; then
          echo "‚ùå Project file not found"
          exit 1
        fi
        echo "‚úÖ Project file found"

    - name: Validate .gitignore
      run: |
        if [ ! -f ".gitignore" ]; then
          echo "‚ö†Ô∏è .gitignore file not found"
        else
          echo "‚úÖ .gitignore file found"
        fi 